import"string"

#pragma link("mega65hyper.ld")

const char* RASTER =0xd012;
const char* VIC_MEMORY = 0xd018;
const char* SCREEN = 0x0400;
const char* BGCOL = 0xd021;
const char* COLS = 0xd800;
const char BLACK = 0;
const char WHITE = 1;
char[]MESSAGE = "checkpoint2.3 by chen1616!";

void main(){
    *VIC_MEMORY = 0x14;
    memset(SCREEN, ' ', 40*25);
    memset(COLS, WHITE,40*25);
    char* sc = SCREEN+40; 
    char* msg = MESSAGE;
while(*msg){
        *sc++ = *msg++;
        }
        
while(true) {
      if(*RASTER==54 || *RASTER==66){
           *BGCOL = WHITE;
          }else{
             *BGCOL = BLACK;
          }
       }
 }
  
 void syscall1(){
		*(SCREEN+80) = '(';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall2(){
		*(SCREEN+79) = ')';
		*(unsigned char *)$D67F = $01;
			}
				
	void syscall3(){
		*(SCREEN+78) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall4(){
		*(SCREEN+77) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall5(){
		*(SCREEN+76) = '(';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall6(){
		*(SCREEN+75) = ')';
		*(unsigned char *)$D67F = $01;
			}
				
	void syscall7(){
		*(SCREEN+74) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall8(){
		*(SCREEN+73) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall9(){
		*(SCREEN+72) = '(';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall10(){
		*(SCREEN+71) = ')';
		*(unsigned char *)$D67F = $01;
			}
				
	void syscall11(){
		*(SCREEN+70) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall12(){
		*(SCREEN+69) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall13(){
		*(SCREEN+68) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall14(){
		*(SCREEN+67) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall15(){
		*(SCREEN+66) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall16(){
		*(SCREEN+65) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall17(){
		*(SCREEN+64) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall18(){
		*(SCREEN+63) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall19(){
		*(SCREEN+62) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall20(){
		*(SCREEN+61) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall21(){
		*(SCREEN+60) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall22(){
		*(SCREEN+59) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall23(){
		*(SCREEN+58) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall24(){
		*(SCREEN+57) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall25(){
		*(SCREEN+56) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall26(){
		*(SCREEN+55) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall27(){
		*(SCREEN+54) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall28(){
		*(SCREEN+53) = ')';
		*(unsigned char *)$D67F = $01;
			}
						
	void syscall29(){
		*(SCREEN+52) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall30(){
		*(SCREEN+51) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall31(){
		*(SCREEN+50) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall32(){
		*(SCREEN+49) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall33(){
		*(SCREEN+48) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall34(){
		*(SCREEN+47) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall35(){
		*(SCREEN+46) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall36(){
		*(SCREEN+45) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall37(){
		*(SCREEN+44) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall38(){
		*(SCREEN+43) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall39(){
		*(SCREEN+42) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall40(){
		*(SCREEN+41) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall41(){
		*(SCREEN+40) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall42(){
		*(SCREEN+39) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall43(){
		*(SCREEN+38) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall44(){
		*(SCREEN+37) = ')';
		*(unsigned char *)$D67F = $01;
			}
						
	void syscall45(){
		*(SCREEN+36) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall46(){
		*(SCREEN+35) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
  void syscall47(){
		*(SCREEN+34) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall48(){
		*(SCREEN+33) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall49(){
		*(SCREEN+32) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall50(){
		*(SCREEN+31) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall51(){
		*(SCREEN+30) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall52(){
		*(SCREEN+29) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall53(){
		*(SCREEN+28) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall54(){
		*(SCREEN+27) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall55(){
		*(SCREEN+26) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall56(){
		*(SCREEN+25) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall57(){
		*(SCREEN+24) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall58(){
		*(SCREEN+23) = ')';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall59(){
		*(SCREEN+22) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall60(){
		*(SCREEN+21) = ')';
		*(unsigned char *)$D67F = $01;
			}
						
	void syscall61(){
		*(SCREEN+20) = '(';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall62(){
		*(SCREEN+19) = ')';
		*(unsigned char *)$D67F = $01;
			}
	
	void syscall63(){
		*(SCREEN+18) = '(';
		*(unsigned char *)$D67F = $01;
			}
			
	void syscall64(){
		*(SCREEN+17) = ')';
		*(unsigned char *)$D67F = $01;
			}
				
	void reset(){
		*(unsigned char *)$D67F = $01;
			}	
	
	void pagfault(){
		*(unsigned char *)$D67F = $01;
			}	
			
	void restorkey(){
		*(unsigned char *)$D67F = $01;
			}	
	
	void alttabkey(){
		*(unsigned char *)$D67F = $01;
			}	
	
	void vf011rd(){
		*(unsigned char *)$D67F = $01;
			}	
	
	void vf011wr(){
		*(unsigned char *)$D67F = $01;
			}	
	
	void reserved(){
		*(unsigned char *)$D67F = $01;
			}	
			
	void cpukil(){
		*(unsigned char *)$D67F = $01;
			}	
     
 #pragma data_seg(Syscall) 
 struct SysCall{
     char xjmp;
     void()* syscall;
     char xnop;
 };
 
 const char JMP = 0x4c;
 const char NOP = 0xea;
 
export struct SysCall[] SYSCALLS = {
    { JMP, &syscall1, NOP},
    { JMP, &syscall2, NOP},
    { JMP, &syscall3, NOP},
    { JMP, &syscall4, NOP},
    { JMP, &syscall5, NOP},
    { JMP, &syscall6, NOP},
    { JMP, &syscall7, NOP},
    { JMP, &syscall8, NOP},
    { JMP, &syscall9, NOP},
    { JMP, &syscall10, NOP},
    { JMP, &syscall11, NOP},
    { JMP, &syscall12, NOP},
    { JMP, &syscall13, NOP},
    { JMP, &syscall14, NOP},
    { JMP, &syscall15, NOP},
    { JMP, &syscall16, NOP},
    { JMP, &syscall17, NOP},
    { JMP, &syscall18, NOP},
    { JMP, &syscall19, NOP},
    { JMP, &syscall20, NOP},
    { JMP, &syscall21, NOP},
    { JMP, &syscall22, NOP},
    { JMP, &syscall23, NOP},
    { JMP, &syscall24, NOP},
    { JMP, &syscall25, NOP},
    { JMP, &syscall26, NOP},
    { JMP, &syscall27, NOP},
    { JMP, &syscall28, NOP},
    { JMP, &syscall29, NOP},
    { JMP, &syscall30, NOP},
    { JMP, &syscall31, NOP},
    { JMP, &syscall32, NOP},
    { JMP, &syscall33, NOP},
    { JMP, &syscall34, NOP},
    { JMP, &syscall35, NOP},
    { JMP, &syscall36, NOP},
    { JMP, &syscall37, NOP},
    { JMP, &syscall38, NOP},
    { JMP, &syscall39, NOP},
    { JMP, &syscall40, NOP},
    { JMP, &syscall41, NOP},
    { JMP, &syscall42, NOP},
    { JMP, &syscall43, NOP},
    { JMP, &syscall44, NOP},
    { JMP, &syscall45, NOP},
    { JMP, &syscall46, NOP},
    { JMP, &syscall47, NOP},
    { JMP, &syscall48, NOP},
    { JMP, &syscall49, NOP},
    { JMP, &syscall50, NOP},
    { JMP, &syscall51, NOP},
    { JMP, &syscall52, NOP},
    { JMP, &syscall53, NOP},
    { JMP, &syscall54, NOP},
    { JMP, &syscall55, NOP},
    { JMP, &syscall56, NOP},
    { JMP, &syscall57, NOP},
    { JMP, &syscall58, NOP},
    { JMP, &syscall59, NOP},
    { JMP, &syscall60, NOP},
    { JMP, &syscall61, NOP},
    { JMP, &syscall62, NOP},
    { JMP, &syscall63, NOP},
    { JMP, &syscall64, NOP}
    };
    
export align(0x100) struct SysCall[] TRAPS = {
    {JMP, &main, NOP},
    {JMP, &reset, NOP},
    {JMP, &pagfault, NOP},
    {JMP, &restorkey, NOP},
    {JMP, &alttabkey, NOP},
    {JMP, &vf011rd, NOP},
    {JMP, &vf011wr, NOP},
    {JMP, &reserved, NOP},
    {JMP, &cpukil, NOP}
};             
